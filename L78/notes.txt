* Hash Table: It is a data structure that implements an associative array, also called a dictionary, which is an abstract data type that maps keys to values. 

* Bucket Array: An array of (fixed) size N. Each cell of the bucket array is called a bucket.

* Hash functions = Hash Code + Compression Function
* Hash Code: A function that compresses, meaning the output is shorter than the input. Often, such a function takes an input of arbitrary or almost arbitrary length to one whose length is a fixed number, like 160 bits.
* Compression Function: Mixes two fixed length inputs and produces a single fixed length output of the same size as one of the inputs. This can also be seen as that the compression function transforms one large fixed-length input into a shorter, fixed-length output.

-> Need of Hash Code
  1. Conversion to int
  2. Uniform distribution

* Collision: Occurs when more than one value to be hashed by a particular hash function hash to the same slot in the table or data structure (hash table) being generated by the hash function.

-> Collision Handling
  1. Open Hashing: A collision avoidence method which uses array of linked list to resolve the collision. It is also known as the separate chaining method (each linked list is considered as a chain).
  2. Closed Addressing: Refers to the fact that we never leave the hash table; every object is stored directly at an index in the hash table's internal array.

* Linear probing: It is a scheme in computer programming for resolving collisions in hash tables, data structures for maintaining a collection of keyâ€“value pairs and looking up the value associated with a given key.
* Quadratic probing: It is an open addressing scheme in computer programming for resolving hash collisions in hash tables. Quadratic probing operates by taking the original hash index and adding successive values of an arbitrary quadratic polynomial until an open slot is found.

* Complexity Analysis
  if n = no. of words
     k = length of word
  H.C. -> O(k) ~ O(1),    if n >> k

* Load Factor: It is defined as (m/n) where n is the total size of the hash table and m is the preferred number of entries that can be inserted before an increment in the size of the underlying data structure is required.
 * Rehashing: The process of recalculating the hashcode of previously-stored entries (Key-Value pairs) in order to shift them to a larger size hashmap when the threshold is reached/crossed, when the number of elements in a hash map reaches the maximum threshold value, it is rehashed.